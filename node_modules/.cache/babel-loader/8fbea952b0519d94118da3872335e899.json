{"ast":null,"code":"var _jsxFileName = \"/Users/joseguevara/kwitter/kwitter_jackinthebox/src/components/connected-route/ConnectedRoute.js\";\nimport React from \"react\";\nimport ProptTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\n/*\n * ConnectedRoute is a component that renders Routes for you\n * It uses the auth store in redux to determine if a route should be rendered\n * or redirected else where based on the auth status\n */\n\nexport function ConnectedRoute({\n  isProtected,\n  redirectIfAuthenticated,\n  component: ComponentToRender,\n  ...rest\n}) {\n  if (!ComponentToRender) {\n    throw new Error(\"ConnectedRoute MUST have a prop named 'component'\");\n  } // https://react-redux.js.org/api/hooks#useselector\n\n\n  const {\n    isAuthenticated,\n    username\n  } = useSelector(state => ({\n    username: state.auth.username,\n    isAuthenticated: state.auth.isAuthenticated\n  }));\n\n  if (redirectIfAuthenticated && isAuthenticated) {\n    return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n      render: ({\n        location\n      }) => /*#__PURE__*/React.createElement(Redirect, {\n        to: {\n          pathname: `/profiles/${username}`,\n          state: {\n            from: location\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  if (isProtected === null || isProtected && isAuthenticated) {\n    return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n      render: renderedProps => /*#__PURE__*/React.createElement(ComponentToRender, Object.assign({}, renderedProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 36\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: ({\n      location\n    }) => /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: `/`,\n        state: {\n          from: location\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }));\n}\nConnectedRoute.defaultProps = {\n  isProtected: null\n}; // https://reactjs.org/docs/typechecking-with-proptypes.html\n\nConnectedRoute.propTypes = {\n  isProtected: ProptTypes.bool,\n  redirectIfAuthenticated: ProptTypes.bool,\n  component: ProptTypes.elementType.isRequired\n};","map":{"version":3,"sources":["/Users/joseguevara/kwitter/kwitter_jackinthebox/src/components/connected-route/ConnectedRoute.js"],"names":["React","ProptTypes","useSelector","Route","Redirect","ConnectedRoute","isProtected","redirectIfAuthenticated","component","ComponentToRender","rest","Error","isAuthenticated","username","state","auth","location","pathname","from","renderedProps","defaultProps","propTypes","bool","elementType","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA;;;;;;AAKA,OAAO,SAASC,cAAT,CAAwB;AAC7BC,EAAAA,WAD6B;AAE7BC,EAAAA,uBAF6B;AAG7BC,EAAAA,SAAS,EAAEC,iBAHkB;AAI7B,KAAGC;AAJ0B,CAAxB,EAKJ;AACD,MAAI,CAACD,iBAAL,EAAwB;AACtB,UAAM,IAAIE,KAAJ,CAAU,mDAAV,CAAN;AACD,GAHA,CAKD;;;AACA,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAgCX,WAAW,CAAEY,KAAD,KAAY;AAC5DD,IAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAWF,QADuC;AAE5DD,IAAAA,eAAe,EAAEE,KAAK,CAACC,IAAN,CAAWH;AAFgC,GAAZ,CAAD,CAAjD;;AAKA,MAAIL,uBAAuB,IAAIK,eAA/B,EAAgD;AAC9C,wBACE,oBAAC,KAAD,oBACMF,IADN;AAEE,MAAA,MAAM,EAAE,CAAC;AAAEM,QAAAA;AAAF,OAAD,kBACN,oBAAC,QAAD;AACE,QAAA,EAAE,EAAE;AACFC,UAAAA,QAAQ,EAAG,aAAYJ,QAAS,EAD9B;AAEFC,UAAAA,KAAK,EAAE;AAAEI,YAAAA,IAAI,EAAEF;AAAR;AAFL,SADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAaD;;AAED,MAAIV,WAAW,KAAK,IAAhB,IAAyBA,WAAW,IAAIM,eAA5C,EAA8D;AAC5D,wBACE,oBAAC,KAAD,oBACMF,IADN;AAEE,MAAA,MAAM,EAAGS,aAAD,iBAAmB,oBAAC,iBAAD,oBAAuBA,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAMD;;AAED,sBACE,oBAAC,KAAD,oBACMT,IADN;AAEE,IAAA,MAAM,EAAE,CAAC;AAAEM,MAAAA;AAAF,KAAD,kBACN,oBAAC,QAAD;AACE,MAAA,EAAE,EAAE;AACFC,QAAAA,QAAQ,EAAG,GADT;AAEFH,QAAAA,KAAK,EAAE;AAAEI,UAAAA,IAAI,EAAEF;AAAR;AAFL,OADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAaD;AAEDX,cAAc,CAACe,YAAf,GAA8B;AAC5Bd,EAAAA,WAAW,EAAE;AADe,CAA9B,C,CAGA;;AACAD,cAAc,CAACgB,SAAf,GAA2B;AACzBf,EAAAA,WAAW,EAAEL,UAAU,CAACqB,IADC;AAEzBf,EAAAA,uBAAuB,EAAEN,UAAU,CAACqB,IAFX;AAGzBd,EAAAA,SAAS,EAAEP,UAAU,CAACsB,WAAX,CAAuBC;AAHT,CAA3B","sourcesContent":["import React from \"react\";\nimport ProptTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n/*\n * ConnectedRoute is a component that renders Routes for you\n * It uses the auth store in redux to determine if a route should be rendered\n * or redirected else where based on the auth status\n */\nexport function ConnectedRoute({\n  isProtected,\n  redirectIfAuthenticated,\n  component: ComponentToRender,\n  ...rest\n}) {\n  if (!ComponentToRender) {\n    throw new Error(\"ConnectedRoute MUST have a prop named 'component'\");\n  }\n\n  // https://react-redux.js.org/api/hooks#useselector\n  const { isAuthenticated, username } = useSelector((state) => ({\n    username: state.auth.username,\n    isAuthenticated: state.auth.isAuthenticated,\n  }));\n\n  if (redirectIfAuthenticated && isAuthenticated) {\n    return (\n      <Route\n        {...rest}\n        render={({ location }) => (\n          <Redirect\n            to={{\n              pathname: `/profiles/${username}`,\n              state: { from: location },\n            }}\n          />\n        )}\n      />\n    );\n  }\n\n  if (isProtected === null || (isProtected && isAuthenticated)) {\n    return (\n      <Route\n        {...rest}\n        render={(renderedProps) => <ComponentToRender {...renderedProps} />}\n      />\n    );\n  }\n\n  return (\n    <Route\n      {...rest}\n      render={({ location }) => (\n        <Redirect\n          to={{\n            pathname: `/`,\n            state: { from: location },\n          }}\n        />\n      )}\n    />\n  );\n}\n\nConnectedRoute.defaultProps = {\n  isProtected: null,\n};\n// https://reactjs.org/docs/typechecking-with-proptypes.html\nConnectedRoute.propTypes = {\n  isProtected: ProptTypes.bool,\n  redirectIfAuthenticated: ProptTypes.bool,\n  component: ProptTypes.elementType.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}